{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/server/app.module.ts","webpack:///./src/server/auth/auth.module.ts","webpack:///./src/server/auth/auth.service.ts","webpack:///./src/server/auth/strategies/jwt-strategy.ts","webpack:///./src/server/email/email.module.ts","webpack:///./src/server/email/email.service.ts","webpack:///./src/server/env/dto/env-result.dto.ts","webpack:///./src/server/env/env.module.ts","webpack:///./src/server/env/env.resolver.ts","webpack:///./src/server/env/env.service.ts","webpack:///./src/server/guards/gqlauthguard.ts","webpack:///./src/server/init.data.setup.ts","webpack:///./src/server/main.ts","webpack:///./src/server/signin/dto/signin-result.dto.ts","webpack:///./src/server/signin/dto/signin.dto.ts","webpack:///./src/server/signin/signin.module.ts","webpack:///./src/server/signin/signin.resolver.ts","webpack:///./src/server/signin/signin.service.ts","webpack:///./src/server/signup/dto/confirm-user-result.dto.ts","webpack:///./src/server/signup/dto/resend-confirm-mail-result.dto.ts","webpack:///./src/server/signup/dto/resend-confirm-mail.dto.ts","webpack:///./src/server/signup/dto/reset-password-result.dto.ts","webpack:///./src/server/signup/dto/reset-password.dto.ts","webpack:///./src/server/signup/dto/send-reset-password-mail-result.dto.ts","webpack:///./src/server/signup/dto/send-reset-password-mail.dto.ts","webpack:///./src/server/signup/dto/signup-result.dto.ts","webpack:///./src/server/signup/dto/signup.dto.ts","webpack:///./src/server/signup/signup.module.ts","webpack:///./src/server/signup/signup.resolver.ts","webpack:///./src/server/signup/signup.service.ts","webpack:///./src/server/site-config/site-config.module.ts","webpack:///./src/server/site-config/site-config.service.ts","webpack:///./src/server/site-config/site-config.ts","webpack:///./src/server/user/dto/change-email-result.dto.ts","webpack:///./src/server/user/dto/change-email.dto.ts","webpack:///./src/server/user/dto/change-password-result.dto.ts","webpack:///./src/server/user/dto/change-password.dto.ts","webpack:///./src/server/user/dto/change-profile-result.dto.ts","webpack:///./src/server/user/dto/change-profile.dto.ts","webpack:///./src/server/user/user.module.ts","webpack:///./src/server/user/user.resolver.ts","webpack:///./src/server/user/user.service.ts","webpack:///./src/server/user/user.ts","webpack:///./src/server/utils/utils.ts","webpack:///external \"@nestjs/common\"","webpack:///external \"@nestjs/core\"","webpack:///external \"@nestjs/graphql\"","webpack:///external \"@nestjs/jwt\"","webpack:///external \"@nestjs/passport\"","webpack:///external \"@nestjs/typeorm\"","webpack:///external \"@sendgrid/mail\"","webpack:///external \"bcrypt\"","webpack:///external \"fs\"","webpack:///external \"helmet\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"passport-jwt\"","webpack:///external \"reflect-metadata\"","webpack:///external \"tslib\"","webpack:///external \"type-graphql\"","webpack:///external \"typeorm\""],"names":[],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/server/main.ts\");\n","import { Module } from '@nestjs/common';\r\nimport { GraphQLModule } from '@nestjs/graphql';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { UserModule } from './user/user.module';\r\nimport { User } from './user/user';\r\nimport { SigninModule } from './signin/signin.module';\r\nimport { EmailModule } from './email/email.module';\r\nimport { SignupModule } from './signup/signup.module';\r\nimport { EnvModule } from './env/env.module';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { SiteConfigModule } from './site-config/site-config.module';\r\nimport { SiteConfig } from './site-config/site-config';\r\n\r\n@Module({\r\n  imports: [\r\n    EnvModule,\r\n    SigninModule,\r\n    SignupModule,\r\n    AuthModule,\r\n    GraphQLModule.forRoot({\r\n      installSubscriptionHandlers: true,\r\n      autoSchemaFile: 'schema.gql',\r\n      context: ({ req }) => ({ req }),\r\n      playground: (process.env.NODE_ENV || 'development') === 'development',\r\n      debug: (process.env.NODE_ENV || 'development') === 'development',\r\n      tracing: (process.env.NODE_ENV || 'development') === 'development'\r\n    }),\r\n    TypeOrmModule.forRoot({\r\n      type: 'mssql',\r\n      host: process.env.DATABASE_HOST,\r\n      username: process.env.DATABASE_USERNAME,\r\n      password: process.env.DATABASE_PASSWORD,\r\n      port: parseInt(process.env.DATABASE_PORT, 10),\r\n      database: process.env.DATABASE_DATABASE,\r\n      extra: {\r\n        options: {\r\n          encrypt: process.env.DATABASE_ENCRYPT === 'yes'\r\n        }\r\n      },\r\n      logging: process.env.NODE_ENV === 'development',\r\n      migrationsRun: true,\r\n      migrations: [ __dirname + '/../db/migrations/**/*.js'],\r\n      entities: [\r\n        User,\r\n        SiteConfig\r\n      ]\r\n    }),\r\n    UserModule,\r\n    EmailModule,\r\n    SiteConfigModule\r\n  ],\r\n\r\n  providers: [\r\n  ],\r\n\r\n  controllers: []\r\n})\r\nexport class AppModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { AuthService } from './auth.service';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { JwtStrategy } from './strategies/jwt-strategy';\r\nimport { UserModule } from '../user/user.module';\r\n\r\n@Module({\r\n  imports: [\r\n    PassportModule.register({ defaultStrategy: 'jwt' }),\r\n    JwtModule.register({\r\n      secretOrPrivateKey: Buffer.from(process.env.RSA_PRIVATE_KEY, 'base64'),\r\n      signOptions: {\r\n        algorithm: 'RSA256',\r\n        expiresIn: '24h'\r\n      }\r\n    }),\r\n    UserModule\r\n  ],\r\n\r\n  providers: [\r\n    AuthService,\r\n    JwtStrategy\r\n  ],\r\n\r\n  exports: [\r\n    AuthService\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { UserService } from '../user/user.service';\r\nimport { IAuthResult } from './interfaces/iauth-result.interface';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { IUser } from '../user/interfaces/iuser.interface';\r\nimport { SignOptions } from 'jsonwebtoken';\r\nimport { IJwtPayload } from './interfaces/ijwt-payload.interface';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    constructor(\r\n        private readonly userService: UserService,\r\n        private readonly jwtService: JwtService\r\n    ) {}\r\n\r\n    auth(_email: string, _password: string): Promise<IAuthResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // Eメールアドレスでユーザを検索する\r\n            this.userService.findByEmail(_email)\r\n            .then((user: IUser) => {\r\n                // Eメールアドレスでユーザがヒットしなければundefined\r\n                if (user === undefined) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'Eメールアドレスまたはパスワードが違います。',\r\n                        token: ''\r\n                    });\r\n                }\r\n                else {\r\n                    // Eメールの確認が未完了ならエラーにする\r\n                    if (!user.isemailconfirmed) {\r\n                        resolve({\r\n                            result: false,\r\n                            message: '登録が完了していません。お送りした登録完了メールで登録を完了させてください。',\r\n                            token: ''\r\n                        });\r\n                    }\r\n                    else {\r\n                        // パスワードが一致するかをチェックする\r\n                        const match: boolean = bcrypt.compareSync(_password, user.password);\r\n                        if (match === true)\r\n                        {\r\n                            // JWTを作成する\r\n                            const jwtPayload: IJwtPayload = { email: _email };\r\n                            const signopt: SignOptions = {\r\n                                algorithm: 'RS256',\r\n                                expiresIn: '24h',\r\n                                subject: _email\r\n                            };\r\n\r\n                            resolve({\r\n                                result: true,\r\n                                message: '',\r\n                                token: this.jwtService.sign(jwtPayload, signopt)\r\n                            });\r\n                        }\r\n                        else\r\n                        {\r\n                            resolve({\r\n                                result: false,\r\n                                message: 'Eメールアドレスまたはパスワードが違います。',\r\n                                token: ''\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .catch((err: any) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { IJwtPayload } from '../interfaces/ijwt-payload.interface';\r\nimport { UserService } from '../../user/user.service';\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy)\r\n{\r\n    constructor(\r\n        private readonly userService: UserService\r\n    )\r\n    {\r\n        super({\r\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n            secretOrKey: Buffer.from(process.env.RSA_PUBLIC_KEY, 'base64')\r\n        });\r\n    }\r\n\r\n    async validate(payload: IJwtPayload) {\r\n        const user = await this.userService.findByEmail(payload.email);\r\n        if (!user) {\r\n            throw new UnauthorizedException();\r\n        }\r\n\r\n        return user;\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { EmailService } from './email.service';\r\nimport { SiteConfigModule } from '../site-config/site-config.module';\r\n\r\n@Module({\r\n    imports: [\r\n        SiteConfigModule\r\n    ],\r\n    providers: [\r\n        EmailService\r\n    ],\r\n    controllers: [  ],\r\n    exports: [\r\n        EmailService\r\n    ]\r\n\r\n})\r\nexport class EmailModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport * as sgmail from '@sendgrid/mail';\r\nimport { IEmailOptions } from './interfaces/iemail-options.interface';\r\nimport * as fs from 'fs';\r\nimport { Utils } from '../utils/utils';\r\nimport { SiteConfigService } from '../site-config/site-config.service';\r\nimport { ISiteConfig } from '../site-config/interfaces/isite-config.interface';\r\n\r\n@Injectable()\r\nexport class EmailService {\r\n    constructor(\r\n        private readonly siteConfigService: SiteConfigService\r\n    ) {}\r\n\r\n    /**\r\n     * メールを送信する\r\n     * @param templateName テンプレートファイル名\r\n     * @param toemail メール送信先\r\n     * @param opts メール送信オプション\r\n     * @returns true:正常\r\n     */\r\n    private sendMail(templateName: string, toemail: string, opts?: IEmailOptions): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            // Eメールテンプレートを読み込む\r\n            fs.readFile(__dirname + '/assets/' + templateName + '.txt', 'utf-8', (err, data) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    // オプションの指定に沿ってテンプレート文字列を置換する\r\n                    if (opts) {\r\n                        // サービス名を置換する\r\n                        if (opts.servicename) {\r\n                            data = data.replace(/##servicename##/g, opts.servicename);\r\n                        }\r\n                        // 確認用URLを置換する\r\n                        if (opts.confirmurl) {\r\n                            data = data.replace(/##confirmurl##/g, opts.confirmurl);\r\n                        }\r\n                        // URLを置換する\r\n                        if (opts.url) {\r\n                            data = data.replace(/##url##/g, opts.url);\r\n                        }\r\n                        // メールアドレスを置換する\r\n                        if (opts.email) {\r\n                            data = data.replace(/##email##/g, opts.email);\r\n                        }\r\n                    }\r\n\r\n                    // SENDGRID_API_KEYを設定する\r\n                    sgmail.setApiKey(process.env.SENDGRID_API_KEY);\r\n                    // 送信するメールの内容を設定する\r\n                    const msg = {\r\n                        to: toemail,\r\n                        from: opts.email,\r\n                        subject: '【' + opts.servicename + '】からのお知らせ',\r\n                        text: data\r\n                    };\r\n\r\n                    // メールを送信する\r\n                    sgmail.send(msg)\r\n                    .then((req) => {\r\n                        resolve(true);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * メールでトークンを送信する\r\n     * @param _format メールフォーマット名\r\n     * @param _path 認証パス名\r\n     * @param _email 送信先メールアドレス\r\n     * @param _url 要求元URL\r\n     * @returns true:成功\r\n     */\r\n    sendTokenMail(_format: string, _path: string, _email: string, _url: string): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            // JWTを作成する\r\n            const token = Utils.getTokenByEmail(_email);\r\n\r\n            // サーバー名を取得する\r\n            const serverName: string = Utils.getServerName(_url);\r\n\r\n            // サイト設定情報を取得する\r\n            this.siteConfigService.getSiteConfig()\r\n            .then((_siteConfig: ISiteConfig) => {\r\n                // メール確認用のメールを送る\r\n                const opts: IEmailOptions = {\r\n                    servicename: _siteConfig.name,\r\n                    confirmurl: serverName + '/' + _path + '/' + token,\r\n                    url: serverName,\r\n                    email: _siteConfig.email\r\n                };\r\n                this.sendMail(_format, _email, opts)\r\n                .then((result: boolean) => {\r\n                    resolve(true);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field,  } from 'type-graphql';\r\nimport { IEnvResult } from '../interfaces/ienv-result.interface';\r\n\r\n@ObjectType()\r\nexport class EnvResult implements IEnvResult {\r\n    @Field()\r\n    serviceName: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { EnvService } from './env.service';\r\nimport { EnvResolver } from './env.resolver';\r\nimport { SiteConfigModule } from '../site-config/site-config.module';\r\n\r\n@Module({\r\n    imports: [\r\n        SiteConfigModule\r\n    ],\r\n    providers: [\r\n        EnvService,\r\n        EnvResolver\r\n    ]\r\n})\r\nexport class EnvModule {}\r\n","import 'reflect-metadata';\r\nimport { Resolver, Query, Args } from '@nestjs/graphql';\r\nimport { IEnvResult } from './interfaces/ienv-result.interface';\r\nimport { EnvService } from './env.service';\r\nimport { EnvResult } from './dto/env-result.dto';\r\n\r\n@Resolver(of => EnvResult)\r\nexport class EnvResolver {\r\n    constructor(\r\n        private readonly envService: EnvService\r\n    ) {}\r\n\r\n    @Query(returns => EnvResult)\r\n    env(@Args('id') id: string): Promise<EnvResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.envService.getEnv()\r\n            .then((envResult: IEnvResult) => {\r\n                resolve(envResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { IEnvResult } from './interfaces/ienv-result.interface';\r\nimport { SiteConfigService } from '../site-config/site-config.service';\r\nimport { ISiteConfig } from '../site-config/interfaces/isite-config.interface';\r\n\r\n@Injectable()\r\nexport class EnvService {\r\n    constructor(\r\n        private readonly siteConfigService: SiteConfigService\r\n    ) {}\r\n\r\n    getEnv(): Promise<IEnvResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.siteConfigService.getSiteConfig()\r\n            .then((_siteConfig: ISiteConfig) => {\r\n                resolve({\r\n                    serviceName: _siteConfig.name\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable, ExecutionContext } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { GqlExecutionContext } from '@nestjs/graphql';\r\n\r\n@Injectable()\r\nexport class GqlAuthGuard extends AuthGuard('jwt') {\r\n    getRequest(context: ExecutionContext) {\r\n        const ctx = GqlExecutionContext.create(context);\r\n        return ctx.getContext().req;\r\n    }\r\n}","import { getRepository } from 'typeorm';\r\nimport { User } from './user/user';\r\nimport { SiteConfig } from './site-config/site-config';\r\n\r\nexport class InitDataSetup {\r\n    async setup() {\r\n        await this.Initialize1554538980430();\r\n    }\r\n\r\n    private async Initialize1554538980430() {\r\n        // 管理者ユーザを追加する\r\n        const userRepository = getRepository(User);\r\n\r\n        const user: User = await userRepository.findOne({where: {email: 'admin@local'}});\r\n        if (!user) {\r\n            const addUser = new User();\r\n            addUser.name = 'サイト管理者';\r\n            addUser.kana = 'サイトカンリシャ';\r\n            addUser.email = 'admin@local';\r\n            addUser.postcode = '000-0000';\r\n            addUser.address = 'なし';\r\n            addUser.phone = '000-000-0000';\r\n            addUser.password = '$2b$10$J9TKmVGfeujQ0q06kjQ54.pK.8OLm0CVSmpMEVK5uDys9tJMQWutu';\r\n            addUser.role = 2;\r\n            addUser.ispasswordreset = 0;\r\n            addUser.isemailconfirmed = 1;\r\n            addUser.sex = 0;\r\n\r\n            userRepository.save(addUser);\r\n        }\r\n\r\n        // サイト情報を追加する\r\n        const siteConfigRepository = getRepository(SiteConfig);\r\n        const siteconfig: SiteConfig = await siteConfigRepository.findOne(1);\r\n        if (!siteconfig) {\r\n            const addSiteConfig: SiteConfig = new SiteConfig();\r\n            addSiteConfig.id = 1;\r\n            addSiteConfig.name = 'スキッズキャンプ予約サイト';\r\n            addSiteConfig.email = 'admin@local';\r\n\r\n            siteConfigRepository.save(addSiteConfig);\r\n        }\r\n\r\n        console.info('InitDataSetup: Initialize1554538980430 done');\r\n    }\r\n}\r\n","import { NestFactory } from '@nestjs/core';\r\nimport * as helmet from 'helmet';\r\nimport { AppModule } from './app.module';\r\nimport { InitDataSetup } from './init.data.setup';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n\r\n  app.use(helmet());\r\n\r\n  // 初期値を設定する\r\n  const initDataSetup: InitDataSetup = new InitDataSetup();\r\n  initDataSetup.setup();\r\n\r\n  const port: number = parseInt(process.env.PORT, 10) || 3000;\r\n\r\n  console.info('rarareserver-api started: NODE_ENV: ' + process.env.NODE_ENV + ', PORT: ' + port);\r\n\r\n  await app.listen(port);\r\n}\r\nbootstrap();\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { ISigninResult } from '../interfaces/isignin-result.interface';\r\n\r\n@ObjectType()\r\nexport class SigninResult implements ISigninResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n    @Field()\r\n    token: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { Field, InputType } from 'type-graphql';\r\nimport { ISignin } from '../interfaces/isignin.interface';\r\n\r\n@InputType()\r\nexport class Signin implements ISignin {\r\n    @Field()\r\n    email: string;\r\n    @Field()\r\n    password: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\nimport { SigninService } from './signin.service';\r\nimport { SigninResolver } from './signin.resolver';\r\nimport { AuthModule } from '../auth/auth.module';\r\n\r\n@Module({\r\n    imports: [\r\n      AuthModule\r\n    ],\r\n    providers: [\r\n      SigninService,\r\n      SigninResolver\r\n    ],\r\n    controllers: [],\r\n    exports: []\r\n})\r\nexport class SigninModule {\r\n}\r\n","import 'reflect-metadata';\r\nimport { Resolver, Mutation, Args } from '@nestjs/graphql';\r\n\r\nimport { SigninService } from './signin.service';\r\nimport { Signin } from './dto/signin.dto';\r\nimport { SigninResult } from './dto/signin-result.dto';\r\n\r\n@Resolver(of => Signin)\r\nexport class SigninResolver {\r\n    constructor(\r\n        private readonly signinService: SigninService\r\n    ) {}\r\n\r\n    @Mutation(returns => SigninResult)\r\n    signin(@Args('signin') _signin: Signin): Promise<SigninResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.signinService.signin(_signin.email, _signin.password)\r\n            .then((signinResult: SigninResult) => {\r\n                resolve(signinResult);\r\n            })\r\n            .catch((err: any) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { ISigninResult } from './interfaces/isignin-result.interface';\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n@Injectable()\r\nexport class SigninService {\r\n    constructor(\r\n        private readonly authService: AuthService\r\n    ) {}\r\n\r\n    signin(_email: string, _password: string): Promise<ISigninResult>\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            this.authService.auth(_email, _password)\r\n            .then((signinResult: ISigninResult) => {\r\n                resolve(signinResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { IConfirmUserResult } from '../interfaces/iconfirm-user-result.interface';\r\n\r\n@ObjectType()\r\nexport class ConfirmUserResult implements IConfirmUserResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { IResendConfirmMailResult } from '../interfaces/iresend-confirm-mail-result.interface';\r\n\r\n@ObjectType()\r\nexport class ResendConfirmMailResult implements IResendConfirmMailResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { IResendConfirmMail } from '../interfaces/iresend-confirm-mail.interface';\r\n\r\n@InputType()\r\nexport class ResendConfirmMail implements IResendConfirmMail {\r\n    @Field()\r\n    email: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { IResetPasswordResult } from '../interfaces/ireset-password-result.interface';\r\n\r\n@ObjectType()\r\nexport class ResetPasswordResult implements IResetPasswordResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { IResetPassword } from '../interfaces/ireset-password.interface';\r\n\r\n@InputType()\r\nexport class ResetPassword implements IResetPassword {\r\n    @Field()\r\n    token: string;\r\n    @Field()\r\n    password: string;\r\n}","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { ISendResetPasswordMailResult } from '../interfaces/isend-reset-password-mail-result.interface';\r\n\r\n@ObjectType()\r\nexport class SendResetPasswordMailResult implements ISendResetPasswordMailResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { ISendResetPasswordMail } from '../interfaces/isend-reset-password-mail.interface';\r\n\r\n@InputType()\r\nexport class SendResetPasswordMail implements ISendResetPasswordMail {\r\n    @Field()\r\n    email: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { ISignupResult } from '../interfaces/isignup-result.interface';\r\n\r\n@ObjectType()\r\nexport class SignupResult implements ISignupResult {\r\n    @Field()\r\n    result: number;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { ISignup } from '../interfaces/isignup.interface';\r\n\r\n@InputType()\r\nexport class Signup implements ISignup {\r\n    @Field()\r\n    name: string;\r\n    @Field()\r\n    kana: string;\r\n    @Field()\r\n    email: string;\r\n    @Field()\r\n    postcode: string;\r\n    @Field()\r\n    address: string;\r\n    @Field()\r\n    phone: string;\r\n    @Field()\r\n    password: string;\r\n    @Field()\r\n    sex: number;\r\n}","import { Module } from '@nestjs/common';\r\nimport { EmailModule } from '../email/email.module';\r\nimport { UserModule } from '../user/user.module';\r\nimport { SignupService } from './signup.service';\r\nimport { SignupResolver } from './signup.resolver';\r\n\r\n@Module({\r\n    imports: [\r\n        UserModule,\r\n        EmailModule\r\n      ],\r\n      providers: [\r\n          SignupService,\r\n          SignupResolver\r\n      ],\r\n      controllers: [],\r\n      exports: []\r\n})\r\nexport class SignupModule {}\r\n","import { Resolver, Mutation, Args, Context } from '@nestjs/graphql';\r\nimport { SignupService } from './signup.service';\r\nimport { Signup } from './dto/signup.dto';\r\nimport { SignupResult } from './dto/signup-result.dto';\r\nimport { ConfirmUserResult } from './dto/confirm-user-result.dto';\r\nimport { ResendConfirmMailResult } from './dto/resend-confirm-mail-result.dto';\r\nimport { ResetPassword } from './dto/reset-password.dto';\r\nimport { ResetPasswordResult } from './dto/reset-password-result.dto';\r\nimport { SendResetPasswordMailResult } from './dto/send-reset-password-mail-result.dto';\r\nimport { SendResetPasswordMail } from './dto/send-reset-password-mail.dto';\r\nimport { ResendConfirmMail } from './dto/resend-confirm-mail.dto';\r\n\r\n@Resolver(of => Signup)\r\nexport class SignupResolver {\r\n    constructor(\r\n        private readonly signupServiece: SignupService\r\n    ) {}\r\n\r\n    @Mutation(returns => SignupResult)\r\n    signup(@Args('signup') signup: Signup, @Context() ctx: any): Promise<SignupResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.signupServiece.signup(signup, ctx.req.headers.origin)\r\n            .then((signupResult: SignupResult) => {\r\n                resolve(signupResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => ConfirmUserResult)\r\n    confirmuser(@Args('token') token: string): Promise<ConfirmUserResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.signupServiece.confirmUser(token)\r\n            .then((confirmUserResult: ConfirmUserResult) => {\r\n                resolve(confirmUserResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => ResendConfirmMailResult)\r\n    resendconfirmmail(@Args('resendconfirmmail') _resendConfirmMail: ResendConfirmMail, @Context() ctx: any): Promise<ResendConfirmMailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.signupServiece.resendConfirmMail(_resendConfirmMail, ctx.req.headers.origin)\r\n            .then((resendConfirmMailResult: ResendConfirmMailResult) => {\r\n                resolve(resendConfirmMailResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => ResetPasswordResult)\r\n    resetpassword(@Args('resetPassword') resetPassword: ResetPassword): Promise<ResetPasswordResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.signupServiece.resetPassword(resetPassword)\r\n            .then((resetPasswordResult: ResetPasswordResult) => {\r\n                resolve(resetPasswordResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => SendResetPasswordMailResult)\r\n    sendresetpasswordmail(@Args('sendresetpasswordmail') _sendResetPasswordMail: SendResetPasswordMail, @Context() ctx: any): Promise<SendResetPasswordMailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.signupServiece.sendResetPasswordMail(_sendResetPasswordMail, ctx.req.headers.origin)\r\n            .then((sendResetPasswordMail: SendResetPasswordMailResult) => {\r\n                resolve(sendResetPasswordMail);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { ISignup } from './interfaces/isignup.interface';\r\nimport { UserService } from '../user/user.service';\r\nimport { EmailService } from '../email/email.service';\r\nimport { ISignupResult } from './interfaces/isignup-result.interface';\r\nimport { IUser } from '../user/interfaces/iuser.interface';\r\nimport { IResendConfirmMailResult } from './interfaces/iresend-confirm-mail-result.interface';\r\nimport { IResetPasswordResult } from './interfaces/ireset-password-result.interface';\r\nimport { Utils } from '../utils/utils';\r\nimport { IResendConfirmMail } from './interfaces/iresend-confirm-mail.interface';\r\nimport { ISendResetPasswordMail } from './interfaces/isend-reset-password-mail.interface';\r\nimport { ISendResetPasswordMailResult } from './interfaces/isend-reset-password-mail-result.interface';\r\nimport { IResetPassword } from './interfaces/ireset-password.interface';\r\n\r\n@Injectable()\r\nexport class SignupService {\r\n    constructor(\r\n        private readonly userService: UserService,\r\n        private readonly emailService: EmailService\r\n    ) {}\r\n\r\n    // サインアップする\r\n    signup(signup: ISignup, _url: string): Promise<ISignupResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // ユーザを登録する\r\n            this.userService.add(signup)\r\n            .then((signupResult: ISignupResult) => {\r\n                // 正常にユーザが追加できたら、登録完了メールを送る\r\n                if (signupResult.result === 0) {\r\n                    this.emailService.sendTokenMail('emailconfirm', 'verifytoken', signup.email, _url)\r\n                    .then((result: boolean) => {\r\n                        resolve(signupResult);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                // ユーザ登録で何らかのエラーがあったらその結果を返す\r\n                else {\r\n                    resolve(signupResult);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    // 登録完了メールを再送する\r\n    resendConfirmMail(_resendConfirmMail: IResendConfirmMail, _url: string): Promise<IResendConfirmMailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // Eメールでユーザ情報を取得する\r\n            this.userService.findByEmail(_resendConfirmMail.email)\r\n            .then((user: IUser) => {\r\n                if (!user) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザが登録されていません'\r\n                    });\r\n                }\r\n                // すでに登録済みならエラーにする\r\n                else if (user.isemailconfirmed === 1) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'すでに登録が完了しています'\r\n                    });\r\n                }\r\n                // いずれでもなければ登録完了用メールを送信する\r\n                else {\r\n                    this.emailService.sendTokenMail('emailconfirm', 'verifytoken', _resendConfirmMail.email, _url)\r\n                    .then((result: boolean) => {\r\n                        resolve({\r\n                            result: true,\r\n                            message: ''\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // パスワードリセットメールを再送する\r\n    sendResetPasswordMail(_sendResetPasswordMail: ISendResetPasswordMail, _url: string): Promise<ISendResetPasswordMailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // Eメールでユーザ情報を取得する\r\n            this.userService.findByEmail(_sendResetPasswordMail.email)\r\n            .then((user: IUser) => {\r\n                if (!user) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザが登録されていません'\r\n                    });\r\n                }\r\n                // 登録が未完了だったらエラーにする\r\n                else if (user.isemailconfirmed === 0) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザの登録が完了していません。登録完了メールで登録を完了してください。'\r\n                    });\r\n                }\r\n                else {\r\n                    // パスワードリセットフラグを設定する\r\n                    user.ispasswordreset = 1;\r\n                    // ユーザを保存する\r\n                    this.userService.save(user)\r\n                    .then((saveUser: IUser) => {\r\n                        // パスワードリセット用メールを送信する\r\n                        this.emailService.sendTokenMail('resetpassword', 'resetpassword', _sendResetPasswordMail.email, _url)\r\n                        .then((result: boolean) => {\r\n                            resolve({\r\n                                result: true,\r\n                                message: ''\r\n                            });\r\n                        })\r\n                        .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    // ユーザ登録を完了する\r\n    confirmUser(_token: string): Promise<IResendConfirmMailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // トークンをチェックする\r\n            Utils.verifyToken(_token)\r\n            .then((payload) => {\r\n                if (!payload) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'トークンが正しくありません。有効期限を確認してください。'\r\n                    });\r\n                }\r\n                else {\r\n                    // Eメールアドレスのユーザが登録されているかを確認する\r\n                    this.userService.findByEmail(payload.email)\r\n                    .then((user: IUser) => {\r\n                        if (!user) {\r\n                            resolve({\r\n                                result: false,\r\n                                message: 'ユーザが登録されていません。'\r\n                            });\r\n                        }\r\n                        else {\r\n                            // すでに登録完了だったらエラーにする\r\n                            if ( user.isemailconfirmed === 1) {\r\n                                resolve({\r\n                                    result: false,\r\n                                    message: user.email + 'はすでに登録完了済みです'\r\n                                });\r\n                            }\r\n                            else {\r\n                                // 登録完了フラグを設定する\r\n                                user.isemailconfirmed = 1;\r\n                                // ユーザ情報を保存する\r\n                                this.userService.save(user)\r\n                                .then((saveUser: IUser) => {\r\n                                    resolve({\r\n                                        result: true,\r\n                                        message: ''\r\n                                    });\r\n                                })\r\n                                .catch((err) => {\r\n                                    reject(err);\r\n                                });\r\n                            }\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    // パスワードをリセットする\r\n    resetPassword(resetPassword: IResetPassword): Promise<IResetPasswordResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // トークンをチェックする\r\n            Utils.verifyToken(resetPassword.token)\r\n            .then((payload) => {\r\n                if (!payload) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'トークンが正しくありません。有効期限を確認してください。'\r\n                    });\r\n                }\r\n                else {\r\n                    // パスワードをリセットする\r\n                    this.userService.resetPassword(payload.email, resetPassword.password)\r\n                    .then((resetPasswordResult: IResetPasswordResult) => {\r\n                        resolve(resetPasswordResult);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { SiteConfigService } from './site-config.service';\r\nimport { SiteConfig } from './site-config';\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([SiteConfig])\r\n  ],\r\n  providers: [\r\n    SiteConfigService\r\n  ],\r\n  exports: [\r\n    SiteConfigService\r\n  ]\r\n})\r\nexport class SiteConfigModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SiteConfig } from './site-config';\r\n\r\n@Injectable()\r\nexport class SiteConfigService {\r\n    constructor(\r\n        @InjectRepository(SiteConfig)\r\n        private readonly siteConfigRepogitory: Repository<SiteConfig>\r\n    ) {}\r\n\r\n    getSiteConfig(): Promise<SiteConfig> {\r\n        return new Promise((resolve, reject) => {\r\n            this.siteConfigRepogitory.findOne(1)\r\n            .then((siteConfig: SiteConfig) => {\r\n                resolve(siteConfig);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import 'reflect-metadata';\r\nimport { Entity, Column, PrimaryColumn } from 'typeorm';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { ISiteConfig } from './interfaces/isite-config.interface';\r\n\r\n@ObjectType()\r\n@Entity({name: 'siteconfig'})\r\nexport class SiteConfig implements ISiteConfig {\r\n\r\n    @Column()\r\n    @Field()\r\n    @PrimaryColumn()\r\n    id: number;\r\n\r\n    @Column()\r\n    @Field()\r\n    name: string;\r\n\r\n    @Column()\r\n    @Field()\r\n    email: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { IChangeEmailResult } from '../interfaces/ichange-email-result.interface';\r\n\r\n@ObjectType()\r\nexport class ChangeEmailResult implements IChangeEmailResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { IChangeEmail } from '../interfaces/ichange-email.interface';\r\n\r\n@InputType()\r\nexport class ChangeEmail implements IChangeEmail {\r\n    @Field()\r\n    id: string;\r\n    @Field()\r\n    email: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { IChangePasswordResult } from '../interfaces/ichange-password-result.interface';\r\n\r\n@ObjectType()\r\nexport class ChangePasswordResult implements IChangePasswordResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { IChangePassword } from '../interfaces/ichange-password.interface';\r\n\r\n@InputType()\r\nexport class ChangePassword implements IChangePassword {\r\n    @Field()\r\n    id: string;\r\n    @Field()\r\n    password: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { ObjectType, Field } from 'type-graphql';\r\nimport { IChangeProfileResult } from '../interfaces/ichange-profile-result.interface';\r\n\r\n@ObjectType()\r\nexport class ChangeProfileResult implements IChangeProfileResult {\r\n    @Field()\r\n    result: boolean;\r\n    @Field()\r\n    message: string;\r\n}\r\n","import 'reflect-metadata';\r\nimport { InputType, Field } from 'type-graphql';\r\nimport { IChangeProfile } from '../interfaces/ichange-profile.interface';\r\n\r\n@InputType()\r\nexport class ChangeProfile implements IChangeProfile {\r\n    @Field()\r\n    id: string;\r\n    @Field()\r\n    name: string;\r\n    @Field()\r\n    kana: string;\r\n    @Field()\r\n    postcode: string;\r\n    @Field()\r\n    address: string;\r\n    @Field()\r\n    phone: string;\r\n    @Field()\r\n    role: number;\r\n    @Field()\r\n    ismailfrom: number;\r\n    @Field()\r\n    sex: number;\r\n}","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { UserService } from './user.service';\r\nimport { User } from './user';\r\nimport { UserResolver } from './user.resolver';\r\nimport { EmailModule } from '../email/email.module';\r\nimport { SiteConfigModule } from '../site-config/site-config.module';\r\n\r\n@Module({\r\n    imports: [\r\n        TypeOrmModule.forFeature([User]),\r\n        EmailModule,\r\n        SiteConfigModule\r\n    ],\r\n    providers: [\r\n        UserService,\r\n        UserResolver\r\n    ],\r\n    controllers: [  ],\r\n    exports: [\r\n        UserService\r\n    ]\r\n})\r\nexport class UserModule {}\r\n","import { Resolver, Query, Args, Mutation, Context } from '@nestjs/graphql';\r\nimport { User } from './user';\r\nimport { UserService } from './user.service';\r\nimport { UseGuards } from '@nestjs/common';\r\nimport { GqlAuthGuard } from '../guards/gqlauthguard';\r\nimport { ChangeEmail } from './dto/change-email.dto';\r\nimport { ChangeEmailResult } from './dto/change-email-result.dto';\r\nimport { ChangePassword } from './dto/change-password.dto';\r\nimport { ChangePasswordResult } from './dto/change-password-result.dto';\r\nimport { ChangeProfile } from './dto/change-profile.dto';\r\nimport { ChangeProfileResult } from './dto/change-profile-result.dto';\r\n\r\n@Resolver(of => User)\r\nexport class UserResolver {\r\n    constructor(\r\n        private readonly userService: UserService\r\n    ) {}\r\n\r\n    @Query(returns => User)\r\n    @UseGuards(GqlAuthGuard)\r\n    user(@Args('email') _email: string): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userService.findByEmail(_email)\r\n            .then((user: User) => {\r\n                resolve(user);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => ChangeEmailResult)\r\n    @UseGuards(GqlAuthGuard)\r\n    changeemail(@Args('changeemail') _changeemail: ChangeEmail, @Context() ctx: any): Promise<ChangeEmailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userService.changeEmail(_changeemail, ctx.req.headers.origin)\r\n            .then((_changeMailResult: ChangeEmailResult) => {\r\n                resolve(_changeMailResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => ChangePasswordResult)\r\n    @UseGuards(GqlAuthGuard)\r\n    changepassword(@Args('changepassword') _changePassword: ChangePassword): Promise<ChangePasswordResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userService.changePassword(_changePassword)\r\n            .then((_changePasswordResult: ChangePasswordResult) => {\r\n                resolve(_changePasswordResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Mutation(returns => ChangeProfileResult)\r\n    @UseGuards(GqlAuthGuard)\r\n    changeprofile(@Args('changeprofile') _changeProfile: ChangeProfile): Promise<ChangeProfileResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userService.changeProfile(_changeProfile)\r\n            .then((_changeProfileResult: ChangeProfileResult) => {\r\n                resolve(_changeProfileResult);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { User } from './user';\r\nimport { ISignup } from '../signup/interfaces/isignup.interface';\r\nimport { ISignupResult } from '../signup/interfaces/isignup-result.interface';\r\nimport { IUser } from './interfaces/iuser.interface';\r\nimport { IResetPasswordResult } from '../signup/interfaces/ireset-password-result.interface';\r\nimport { IChangeEmail } from './interfaces/ichange-email.interface';\r\nimport { IChangeEmailResult } from './interfaces/ichange-email-result.interface';\r\nimport { EmailService } from '../email/email.service';\r\nimport { IChangePassword } from './interfaces/ichange-password.interface';\r\nimport { IChangePasswordResult } from './interfaces/ichange-password-result.interface';\r\nimport { IChangeProfile } from './interfaces/ichange-profile.interface';\r\nimport { IChangeProfileResult } from './interfaces/ichange-profile-result.interface';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    constructor(\r\n        @InjectRepository(User)\r\n        private readonly userRepository: Repository<User>,\r\n        private readonly emailService: EmailService\r\n    ) {}\r\n\r\n    // 指定されたEメールアドレスのユーザを検索する\r\n    findByEmail(_email: string): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userRepository.findOne({ where: { email: _email }})\r\n                .then((user: User) => {\r\n                    resolve(user);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * IDでユーザ情報を取得する\r\n     * @param _id: string ID\r\n     * @return User: User ユーザ情報\r\n     */\r\n    findById(_id: string): Promise<User> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userRepository.findOne(_id)\r\n                .then((user: User) => {\r\n                    resolve(user);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                });\r\n        });\r\n    }\r\n\r\n    // ユーザを追加する\r\n    add(signup: ISignup): Promise<ISignupResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.findByEmail(signup.email)\r\n            .then((user: User) => {\r\n                if (user !== undefined) {\r\n                    if (user.isemailconfirmed) {\r\n                        resolve({\r\n                            result: 1,\r\n                            message: 'すでに登録されています。サインインしてください。'\r\n                        });\r\n                    }\r\n                    else {\r\n                        resolve({\r\n                            result: 2,\r\n                            message: '登録が完了していません。登録完了メールで登録を完了してください。'\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    // ユーザ情報を設定する\r\n                    const addUser = new User();\r\n                    addUser.name = signup.name;\r\n                    addUser.kana = signup.kana;\r\n                    addUser.email = signup.email;\r\n                    addUser.postcode = signup.postcode;\r\n                    addUser.address = signup.address;\r\n                    addUser.phone = signup.phone;\r\n                    // パスワードはハッシュ化する\r\n                    addUser.password = this.getPasswordHash(signup.password);\r\n                    // Eメール確認フラグは1に設定する\r\n                    addUser.isemailconfirmed = 1;\r\n                    // ユーザ情報を登録する\r\n                    this.userRepository.save(addUser)\r\n                    .then((result: User) => {\r\n                        resolve({\r\n                            result: 0,\r\n                            message: ''\r\n                        });\r\n                    })\r\n                    .catch((err: any) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            })\r\n            .catch((err: any) => {\r\n                 reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    // ユーザ情報を更新する\r\n    save(_user: IUser): Promise<IUser> {\r\n        return new Promise((resolve, reject) => {\r\n            this.userRepository.save(_user)\r\n            .then((user: IUser) => {\r\n                resolve(user);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    resetPassword(_email: string, _password: string): Promise<IResetPasswordResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // ユーザ情報を取得する\r\n            this.findByEmail(_email)\r\n            .then((user: IUser) => {\r\n                // ユーザ情報が取得できなければエラーにする\r\n                if (!user) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザが登録されていません'\r\n                    });\r\n                }\r\n                // パスワードリセットフラグが0ならエラーにする\r\n                else if (user.ispasswordreset === 0) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'パスワードがリセットされていません'\r\n                    });\r\n                }\r\n                // 指定されたパスワードを設定する\r\n                else {\r\n                    user.password = this.getPasswordHash(_password);\r\n                    user.ispasswordreset = 0;\r\n                    this.userRepository.save(user)\r\n                    .then((resetUser: IUser) => {\r\n                        resolve({\r\n                            result: true,\r\n                            message: ''\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Eメールアドレスを変更する\r\n     * @params _changeEmail: IChangeEmail Eメールアドレス変更情報\r\n     * @returns changeEmailResult: IChangeEmailResult Eメールアドレス変更結果\r\n     */\r\n    changeEmail(_changeEmail: IChangeEmail, _url: string): Promise<IChangeEmailResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // IDに該当するユーザ情報を取得する\r\n            this.findById(_changeEmail.id)\r\n            .then((user: User) => {\r\n                if (!user) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザが登録されていません'\r\n                    });\r\n                }\r\n                else {\r\n                    // Eメールアドレスを変更する\r\n                    user.email = _changeEmail.email;\r\n                    // 登録完了フラグを1にする\r\n                    user.isemailconfirmed = 1;\r\n                    this.save(user)\r\n                    .then((_saveUser: IUser) => {\r\n                        this.emailService.sendTokenMail('changeemailconfirm', 'verifytoken', _saveUser.email, _url)\r\n                        .then((result: boolean) => {\r\n                            if (result === true) {\r\n                                resolve({\r\n                                    result: true,\r\n                                    message: ''\r\n                                });\r\n                            }\r\n                            else {\r\n                                resolve({\r\n                                    result: false,\r\n                                    message: 'Eメールアドレス変更完了のメール送信ができません'\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * IDに該当するユーザのパスワードを変更する\r\n     * @param _changePassword パスワード変更情報\r\n     * @returns パスワード変更結果\r\n     */\r\n    changePassword(_changePassword: IChangePassword): Promise<IChangePasswordResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // ID指定でユーザ情報を取得する\r\n            this.findById(_changePassword.id)\r\n            .then((_user: IUser) => {\r\n                if (!_user) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザが登録されていません'\r\n                    });\r\n                }\r\n                else {\r\n                    // パスワードを設定する\r\n                    _user.password = this.getPasswordHash(_changePassword.password);\r\n                    // ユーザ情報を保存する\r\n                    this.save(_user)\r\n                    .then((_saveUser: IUser) => {\r\n                        resolve({\r\n                            result: true,\r\n                            message: ''\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * IDに合致するユーザのプロファイルを変更する\r\n     * @param _changeProfile プロファイル情報\r\n     * @returns プロファイル変更結果\r\n     */\r\n    changeProfile(_changeProfile: IChangeProfile): Promise<IChangeProfileResult> {\r\n        return new Promise((resolve, reject) => {\r\n            // IDに該当するユーザ情報を取得する\r\n            this.findById(_changeProfile.id)\r\n            .then((_user: IUser) => {\r\n                if (!_user) {\r\n                    resolve({\r\n                        result: false,\r\n                        message: 'ユーザが登録されていません'\r\n                    });\r\n                }\r\n                else {\r\n                    // ユーザ情報を設定する\r\n                    _user.name = _changeProfile.name;\r\n                    _user.kana = _changeProfile.kana;\r\n                    _user.postcode = _changeProfile.postcode;\r\n                    _user.address = _changeProfile.address;\r\n                    _user.phone = _changeProfile.phone;\r\n                    _user.role = _changeProfile.role;\r\n                    _user.sex = _changeProfile.sex;\r\n                    // ユーザ情報を保存する\r\n                    this.save(_user)\r\n                    .then((_saveUser: IUser) => {\r\n                        resolve({\r\n                            result: true,\r\n                            message: ''\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // パスワードをハッシュ化する\r\n    private getPasswordHash(_password: String) {\r\n        const saltRounds: number = 10;\r\n        const salt: string = bcrypt.genSaltSync(saltRounds);\r\n        return bcrypt.hashSync(_password, salt);\r\n    }\r\n}\r\n","import 'reflect-metadata';\r\nimport { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\nimport { IUser } from './interfaces/iuser.interface';\r\nimport { ObjectType, Field } from 'type-graphql';\r\n\r\n/**\r\n * ユーザテーブル\r\n */\r\n@ObjectType()\r\n@Entity({name: 'user'})\r\nexport class User implements IUser {\r\n    /**\r\n     * ID\r\n     */\r\n    @Field()\r\n    @PrimaryGeneratedColumn('uuid')\r\n    id: string;\r\n\r\n    /**\r\n     * 氏名\r\n     */\r\n    @Field()\r\n    @Column()\r\n    name: string;\r\n\r\n    /**\r\n     * 氏名カナ\r\n     */\r\n    @Field()\r\n    @Column()\r\n    kana: string;\r\n\r\n    /**\r\n     * Eメール\r\n     */\r\n    @Field()\r\n    @Column()\r\n    email: string;\r\n\r\n    /**\r\n     * 郵便番号\r\n     */\r\n    @Field()\r\n    @Column()\r\n    postcode: string;\r\n\r\n    /**\r\n     * 住所\r\n     */\r\n    @Field()\r\n    @Column()\r\n    address: string;\r\n\r\n    /**\r\n     * 電話番号\r\n     */\r\n    @Field()\r\n    @Column()\r\n    phone: string;\r\n\r\n    /**\r\n     * パスワード(ハッシュ値)\r\n     */\r\n    @Field()\r\n    @Column()\r\n    password: string;\r\n\r\n    /**\r\n     * 管理者\r\n     * 2: システム管理者\r\n     * 1: 管理者\r\n     * 0: 一般\r\n     */\r\n    @Field()\r\n    @Column()\r\n    role: number;\r\n\r\n    /**\r\n     * 登録完了待ちフラグ\r\n     *  1:登録完了待ち\r\n     *  0:登録完了\r\n     */\r\n    @Field()\r\n    @Column()\r\n    isemailconfirmed: number;\r\n\r\n    /**\r\n     * パスワードリセットフラグ\r\n     *  1: パスワードリセット中\r\n     *  0: 通常\r\n     */\r\n    @Field()\r\n    @Column()\r\n    ispasswordreset: number;\r\n\r\n    /**\r\n     * 作成日\r\n     */\r\n    @Field()\r\n    @CreateDateColumn()\r\n    createdAt: Date;\r\n\r\n    /**\r\n     * 更新日\r\n     */\r\n    @Field()\r\n    @UpdateDateColumn()\r\n    updatedAt: Date;\r\n\r\n    /**\r\n     * 性別\r\n     *  0: 男性\r\n     *  1: 女性\r\n     */\r\n    @Field()\r\n    sex: number;\r\n}\r\n","import { IJwtPayload } from '../auth/interfaces/ijwt-payload.interface';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\nexport class Utils {\r\n    /**\r\n     * contextからサーバー名を取得する\r\n     * @param _context: any context\r\n     * @returns サーバー名\r\n     */\r\n    static getServerName(_url: string): string {\r\n        const urlinfo = new URL(_url);\r\n\r\n        let serverName = urlinfo.protocol + '//' + urlinfo.hostname;\r\n        if (urlinfo.port) {\r\n            serverName += ':' + urlinfo.port;\r\n        }\r\n\r\n        return serverName;\r\n    }\r\n\r\n    /**\r\n     * Eメールアドレスからトークンを作成する\r\n     * @param _email: string Eメールアドレス\r\n     * @returns トークン\r\n     */\r\n    static getTokenByEmail(_email: string): string\r\n    {\r\n        // JWTを作成する\r\n        const jwtPayload: IJwtPayload = { email: _email };\r\n        const token: string = jwt.sign(jwtPayload,\r\n            Buffer.from(process.env.RSA_PRIVATE_KEY, 'base64'),\r\n            {\r\n                algorithm: 'RS256',\r\n                expiresIn: '7d',\r\n                subject: _email\r\n            });\r\n\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * トークンを公開鍵で検証する\r\n     * @param _token トークン\r\n     * @returns payload(undefinedはトークンの有効期間切れ)\r\n     */\r\n    static verifyToken(_token: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            // JWTを公開鍵で検証する\r\n            jwt.verify(_token,\r\n                        Buffer.from(process.env.RSA_PUBLIC_KEY, 'base64'),\r\n                        {\r\n                            algorithms: ['RS256']\r\n                        },\r\n                        ((err, payload) => {\r\n                            if (err) {\r\n                                if (err.name === 'TokenExpiredError') {\r\n                                    resolve(undefined);\r\n                                }\r\n                                else {\r\n                                    reject(err);\r\n                                }\r\n                            }\r\n                            else {\r\n                                resolve(payload);\r\n                            }\r\n            }));\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/graphql\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"@sendgrid/mail\");","module.exports = require(\"bcrypt\");","module.exports = require(\"fs\");","module.exports = require(\"helmet\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"tslib\");","module.exports = require(\"type-graphql\");","module.exports = require(\"typeorm\");"],"sourceRoot":""}